from kaleidoscope.globals import EventType


class Event(object):
    """
    Event is base class providing an interface for all subsequent
    (inherited) events, that will trigger further events in the
    trading infrastructure.
    """

    def __init__(self, event_type, date):
        self.event_type = event_type
        self.date = date

    def print_event(self):
        pass


class DataEvent(Event):

    def __init__(self, date, quotes):
        """
        A Data Event is generated by the data feed when it retrieves latest quotes
        from the data source as called by the option chain iterator. It contains an
        OptionQuery object 'quotes' to be fed into the broker to update pending orders
        and account positions. It is also fed to the strategy to be used to generate trading
        actions.

        :param date: The date of the quotes
        :param quotes: A DataFrame containing option chains for all subscribed symbols
        """

        super().__init__(EventType.DATA, date)
        self.quotes = quotes


class OrderEvent(Event):
    def __init__(self, date, strategy, action,
                 quantity, order_type, order_tif, limit_price):
        """
        An Order Event is created by the strategy class to hold an order request
        to be executed by the broker.

        :param date: Date of event
        :param order: Order for the event
        """

        super().__init__(EventType.ORDER, date)
        self.strategy = strategy
        self.action = action
        self.quantity = quantity
        self.order_type = order_type
        self.order_tif = order_tif
        self.limit_price = limit_price

        self.print_event()

    def print_event(self):
        """
        Outputs the values within the OrderEvent.
        """

        if self.limit_price is None:
            price = "MKT"
        else:
            price = '@%s' % '{:.2f}'.format(self.limit_price)

        print(f"ORDER OPENED ON {self.date}: {self.quantity} {self.action.name} {price} {self.strategy}")


class FillEvent(Event):

    def __init__(self, date, order):
        """
        A Fill event is generated by the broker when an order has passed all
        execution checks and executed at the current market price.

        :param date: Date of event
        :param order: Order for the event
        """

        super().__init__(EventType.FILL, date)
        self.order = order
        self.mark = order.mark
        self.ticket = order.ticket
        self.action = order.action
        self.quantity = order.quantity
        self.cost = order.total_cost
        self.margin = order.margin
        self.commission = order.commissions

        self.print_event()

    def print_event(self):
        print(f"ORDER #{self.order.ticket} FILLED ON {self.date}: {self.order}")


class RejectedEvent(Event):
    def __init__(self, date, order):
        """
        A Rejected Event is generated when a newly submitted order does not meet
        the execution criterion such as not enough buying power or cash.

        :param date:
        :param order:
        """
        super().__init__(EventType.REJECTED, date)
        self.order = order
        self.print_event()

    def print_event(self):
        print(f"ORDER REJECTED ON {self.date}: {self.order}")


class ExpiredEvent(Event):
    def __init__(self, date):
        """
        A Rejected Event is generated when a newly submitted order does not meet
        the execution criterion such as not enough buying power or cash.

        :param date: Date of event
        """
        super().__init__(EventType.EXPIRED, date)
        self.print_event()

    def print_event(self):
        print(f"ORDER OR POSITIONS EXPIRED ON {self.date}")
